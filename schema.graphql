type User {
  id: ID!
  email: String!
  primaryEmailId: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  username: String!
  name: String
  releaseChannel: String
  avatarUrl: String
}

type Organization {
  id: ID!
  name: String!
}

enum ProjectVisibility {
  organization
  project
}

type Project {
  id: ID!
  name: String!
  about:  String
  description: String
  color: String
  createdAt: String!
  updatedAt: String!
  organizationId: String!
  createdByUser: User
  deletedAt: String
  archivedAt: String
  firstPushedAt: String!
  pushedAt: String
  repoCreatedAt: String!
  visibility: ProjectVisibility
  sizeInBytes: Int
  userIds: [String]
}

type Annotation {
  x: Int!
  y: Int!
  width: Int!
  height: Int!
}

input AnnotationInput {
  x: Int!
  y: Int!
  width: Int!
  height: Int!
}

type Comment {
  id: ID!
  body: String!
  annotation: Annotation
}

input CommentInput {
  body: String!
  annotation: AnnotationInput
}

type Collection {
  id: ID!
  user: User
  project: Project
  name: String!
  description: String
  createdAt: String!
  publishedAt: String
}

enum CommitType {
  PROJECT_CREATED
	FILE_ADDED
	FILE_RENAMED
	FILE_DELETED
	FILE_REPLACED
	FILE_UPGRADED
	LIBRARY_ADDED
	LIBRARY_REMOVED
	RESTORE
	UPDATE
	MERGE
	NORMAL
}

type Commit {
  sha: ID!
  time: String!
  title: String!
  description: String
  destinationBranchId: String
  destinationBranchName: String
  fileIds: [String]
  parents: [String]
  projectId: String!
  sourceBranchId: String
  sourceBranchName: String
  type: CommitType
  userId: String
  userName: String
}

type Branch {
  id: ID!
  name: String!
  description: String
  userName: String
  userId: String
  createdAt: String!
  updatedAt: String!
  status: String
  parent: String
  startedAtSha: String
  head: String!
  mergeSha: String
  mergedIntoBranchId: String
  divergedFromBranchId: String
  projectId: String!
  user: User
}

type Changeset {
  id: ID!
}

type Layer {
  id: ID!
  name: String!
  type: String!
  width: Int!
  height: Int!
  x: Int!
  y: Int!
  lastChangedAtSha: String!
  projectId: String!
  sha: String!
  fileId: String!
  pageId: String!
  updatedAt: String!
  order: Int!
  libraryId: String!
}

type Page {
  id: ID!
  name: String!
  projectId: String!
  sha: String!
  fileId: String!
  type: String
  order: Int!
}

enum SupportedFileType {
  sketch
}

type File {
  id: ID!
  project: Project
  pages: [Page]
  name: String
  type: SupportedFileType
  applicationVersion: String
  applicationDocumentVersion: String
  isLibrary: Boolean
  sha: String
  lastChangedAtSha: String
  updatedAt: String
}

type Library {
  fileId: ID!
  name: String
  type: SupportedFileType
  projectId: String
  projectName: String
  branchId: String
  branchName: String
}

type LayerDataset {
  projectId: String!
  sha: String!
  fileId: String!
  layerId: String!
}

input ObjectDescriptor { # TODO https://github.com/facebook/graphql/issues/488
  organizationId: String
  projectId: String!
  branchId: String!
  fileId: String
  pageId: String
  layerId: String
  sha: String
  collectionId: String
}

type OrganizationsEndpoint {
  list: [Organization]
}

enum ProjectStatus {
  active
  archived
}

input ProjectsOptions {
  filter: ProjectStatus
}

type ProjectsEndpoint {
  list(objectDescriptor: ObjectDescriptor, options: ProjectsOptions): [Project]
  info(objectDescriptor: ObjectDescriptor): Project
}

type CollectionsEndpoint {
  list(objectDescriptor: ObjectDescriptor): [Collection]
  info(objectDescriptor: ObjectDescriptor): Collection
}

type CommentsEndpoint {
  create(
    objectDescriptor: ObjectDescriptor
    input: CommentInput
  ): Comment
}

type CommitsEndpoint {
  list(objectDescriptor: ObjectDescriptor): [Commit]
  info(objectDescriptor: ObjectDescriptor): Commit
}

enum BranchFilter {
  active
  archived
  mine
}

input BranchesOptions {
  filter: BranchFilter
}

type BranchesEndpoint {
  list(objectDescriptor: ObjectDescriptor, options: BranchesOptions): [Branch]
  info(objectDescriptor: ObjectDescriptor): Branch
}

type ChangesetsEndpoint {
  info(objectDescriptor: ObjectDescriptor): Changeset
}

type FilesEndpoint {
  list(objectDescriptor: ObjectDescriptor): [File]
  info(objectDescriptor: ObjectDescriptor): File
}

type PagesEndpoint {
  list(objectDescriptor: ObjectDescriptor): [Page]
  info(objectDescriptor: ObjectDescriptor): Page
}

type LayersEndpoint {
  list(objectDescriptor: ObjectDescriptor): [Layer]
  info(objectDescriptor: ObjectDescriptor): Layer
}

type PreviewsEndpoint {
  info(objectDescriptor: ObjectDescriptor): String
  raw(objectDescriptor: ObjectDescriptor): String
}

type DataEndpoint {
  info(objectDescriptor: ObjectDescriptor): LayerDataset
}

type Query {
  organizations: OrganizationsEndpoint
  projects: ProjectsEndpoint
  collections: CollectionsEndpoint
  commits: CommitsEndpoint
  branches: BranchesEndpoint
  changesets: ChangesetsEndpoint
  files: FilesEndpoint
  pages: PagesEndpoint
  layers: LayersEndpoint
  previews: PreviewsEndpoint
  data: DataEndpoint
}

type Mutation {
  comments: CommentsEndpoint
}
